Index: src/controller/PhotoSystemController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.stage.FileChooser;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Callback;\r\nimport model.Album;\r\nimport model.Photo;\r\nimport model.Tag;\r\nimport model.User;\r\nimport photos15.PhotoThumbnail;\r\n\r\nimport java.io.*;\r\nimport java.net.URL;\r\nimport java.util.Calendar;\r\nimport java.util.List;\r\nimport java.util.ResourceBundle;\r\n\r\n/**\r\n * Extends Controller class to represent Photo function\r\n * @author Hemang Hirpara hhh23\r\n * @author Poojan Patel pdp83\r\n */\r\npublic class PhotoSystemController extends Controller implements Initializable{\r\n    @FXML private ListView<Photo> images_list;\r\n    @FXML private TextArea status_ta;\r\n    @FXML private ChoiceBox<Tag> tags_cb;\r\n    @FXML private TextField cap_tf;\r\n    @FXML private TextField date_tf;\r\n    @FXML private TextField tagtype_tf;\r\n    @FXML private TextField tagval_tf;\r\n    @FXML private TextField albname_tf;\r\n    @FXML private Button add_tag_btn;\r\n    @FXML private Button del_tag_btn;\r\n    @FXML private Button edit_cap_btn;\r\n\r\n    private Stage stage;\r\n    private User user;\r\n    private Album album;\r\n    private List<User> userList;\r\n    private Album photoAlbum;\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n\r\n    }\r\n\r\n    public void initData(List<User> userList, User user, Album album, Stage stage){\r\n        this.stage = stage;\r\n        this.user = user;\r\n        this.userList = userList;\r\n        this.album = album;\r\n        images_list.setCellFactory(new Callback<ListView<Photo>, ListCell<Photo>>() {\r\n            @Override\r\n            public ListCell<Photo> call(ListView<Photo> photoListView) {\r\n                return new PhotoThumbnail();\r\n            }\r\n        });\r\n        images_list.setItems(FXCollections.observableArrayList(album.getPhotos()));\r\n\r\n        if(album.getPhotos().size() > 0){\r\n            images_list.getSelectionModel().selectFirst();\r\n            displayDetails(images_list.getSelectionModel().getSelectedItem());\r\n            //set tags dropdown list\r\n            tags_cb.setItems(FXCollections.observableList(images_list.getSelectionModel().getSelectedItem().getTags()));\r\n        }\r\n\r\n    }\r\n\r\n    public void addBtnAction(ActionEvent actionEvent) {\r\n        FileChooser fileChooser = new FileChooser();\r\n        fileChooser.setTitle(\"Choose a Photo\");\r\n        File selectedFile = fileChooser.showOpenDialog(stage);\r\n        if(selectedFile != null) {\r\n            String extension = selectedFile.getName().substring(selectedFile.getName().lastIndexOf(\".\"));\r\n            if(!(extension.equals(\".jpg\") || extension.equals(\".jpeg\") || extension.equals(\".png\"))){\r\n                status_ta.setText(\"Invalid file type: \" + extension);\r\n                return;\r\n            }\r\n            //make photo\r\n            Photo photoToAdd = new Photo(selectedFile.getName(),selectedFile);\r\n            //check for duplicates here\r\n            images_list.getItems().add(photoToAdd);\r\n            album.getPhotos().add(photoToAdd);\r\n            updateData();\r\n        }\r\n    }\r\n\r\n    public void addTagBtnAction(ActionEvent actionEvent) {\r\n        //on click, make all text fields disappear, bring focus to tag text fields\r\n        if(add_tag_btn.getText().equals(\"Add Tag\")) {\r\n            images_list.setDisable(true);\r\n            images_list.setEditable(false);\r\n            cap_tf.setDisable(true);\r\n            date_tf.setDisable(true);\r\n            albname_tf.setDisable(true);\r\n            tags_cb.setDisable(true);\r\n            del_tag_btn.setVisible(false);\r\n            edit_cap_btn.setVisible(false);\r\n            tagtype_tf.setEditable(true);\r\n            tagval_tf.setEditable(true);\r\n            tagval_tf.requestFocus();\r\n            tagtype_tf.requestFocus();\r\n            tagval_tf.setPromptText(\"Enter A Tag Value\");\r\n            tagtype_tf.setPromptText(\"Enter A Tag Type\");\r\n            add_tag_btn.setText(\"Confirm\");\r\n        }\r\n        else if(add_tag_btn.getText().equals(\"Confirm\")) {\r\n            //error check, do no allow duplicate tags\r\n            Tag t = new Tag(tagtype_tf.getText(), tagval_tf.getText());\r\n            images_list.getSelectionModel().getSelectedItem().addTag(t);\r\n            add_tag_btn.setText(\"Add Tag\");\r\n            updateData();\r\n            resetFields();\r\n        }\r\n    }\r\n\r\n    public void editCaptionBtnAction(ActionEvent actionEvent) {\r\n        if(edit_cap_btn.getText().equals(\"Edit Caption\")) {\r\n            images_list.setDisable(true);\r\n            images_list.setEditable(false);\r\n            tags_cb.setDisable(true);\r\n            date_tf.setDisable(true);\r\n            tagtype_tf.setDisable(true);\r\n            tagval_tf.setDisable(true);\r\n            albname_tf.setDisable(true);\r\n            del_tag_btn.setVisible(false);\r\n            add_tag_btn.setVisible(false);\r\n            cap_tf.setEditable(true);\r\n            cap_tf.requestFocus();\r\n            cap_tf.setPromptText(\"Enter Caption for photo\");\r\n            edit_cap_btn.setText(\"Confirm\");\r\n        }\r\n        else if(edit_cap_btn.getText().equals(\"Confirm\")){\r\n            images_list.getSelectionModel().getSelectedItem().setCaption(cap_tf.getText());\r\n            images_list.refresh();\r\n            edit_cap_btn.setText(\"Edit Caption\");\r\n            updateData();\r\n            resetFields();\r\n        }\r\n    }\r\n\r\n    public void deleteTagBtnAction(ActionEvent actionEvent) {\r\n    }\r\n\r\n    public void cancelBtnAction(ActionEvent actionEvent) {\r\n        resetFields();\r\n    }\r\n\r\n    /**\r\n     * Quit application button functionality\r\n     * @param event\r\n     */\r\n    public void quitBtnAction(ActionEvent event) {\r\n        updateData();\r\n        System.exit(1);\r\n    }\r\n\r\n    private void resetFields() {\r\n        images_list.setDisable(false);\r\n        images_list.setEditable(true);\r\n        cap_tf.setDisable(false);\r\n        cap_tf.setEditable(false);\r\n        date_tf.setDisable(false);\r\n        albname_tf.setDisable(false);\r\n        tagtype_tf.setDisable(false);\r\n        tagval_tf.setDisable(false);\r\n        tagval_tf.setEditable(false);\r\n        tagtype_tf.setEditable(false);\r\n        tags_cb.setDisable(false);\r\n        add_tag_btn.setVisible(true);\r\n        del_tag_btn.setVisible(true);\r\n        edit_cap_btn.setVisible(true);\r\n        add_tag_btn.setText(\"Add Tag\");\r\n        del_tag_btn.setText(\"Delete Tag\");\r\n        edit_cap_btn.setText(\"Edit Caption\");\r\n        tagval_tf.setPromptText(\"\");\r\n        tagtype_tf.setPromptText(\"\");\r\n        cap_tf.setPromptText(\"\");\r\n        tagval_tf.setText(\"\");\r\n        tagtype_tf.setText(\"\");\r\n        cap_tf.setText(images_list.getSelectionModel().getSelectedItem().getCaption());\r\n    }\r\n\r\n    /**\r\n     * Display album details on mouse click\r\n     * @param mouseEvent\r\n     */\r\n    public void displayDetails(MouseEvent mouseEvent) {\r\n        Photo temp = (Photo) images_list.getSelectionModel().getSelectedItem();\r\n        displayDetails(temp);\r\n    }\r\n\r\n    /**\r\n     * Display photo details based on input photo\r\n     * @param a photo details to display\r\n     */\r\n    private void displayDetails(Photo a){\r\n        if(a == null){\r\n            cap_tf.setText(\"null\");\r\n            date_tf.setText(\"null\");\r\n            albname_tf.setText(\"null\");\r\n            tags_cb.setItems(null);\r\n        }else\r\n        {\r\n            cap_tf.setText(a.getCaption());\r\n            date_tf.setText(a.getDateString());\r\n            albname_tf.setText(album.getName());\r\n            tags_cb.setItems(FXCollections.observableList(a.getTags()));\r\n        }\r\n\r\n    }\r\n\r\n    private void updateData() {\r\n        try {\r\n            FileOutputStream fos = new FileOutputStream(getDataPath());\r\n            ObjectOutputStream ous = new ObjectOutputStream(fos);\r\n            ous.writeObject(userList);\r\n            ous.close();\r\n            fos.close();\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void backBtnAction(ActionEvent event) {\r\n        try{\r\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/view/userSystem.fxml\"));\r\n            Parent parent = (Parent) loader.load();\r\n            UserSystemController controller = loader.getController();\r\n            Scene photoScene = new Scene(parent);\r\n            Stage stage = (Stage) ((Node)event.getSource()).getScene().getWindow();\r\n            controller.initData(this.userList, user);\r\n            stage.setScene(photoScene);\r\n            stage.show();\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/controller/PhotoSystemController.java	(revision a7b017be819c35ce5f90cb82abb4cdb34200b531)
+++ src/controller/PhotoSystemController.java	(date 1586876765568)
@@ -94,6 +94,7 @@
             //check for duplicates here
             images_list.getItems().add(photoToAdd);
             album.getPhotos().add(photoToAdd);
+            album.adjustDates();
             updateData();
         }
     }
